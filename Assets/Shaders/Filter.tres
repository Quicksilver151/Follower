[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 5

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="VisualShaderNodeVectorFunc" id=5]
function = 5

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "screen_uv"

[sub_resource type="VisualShader" id=6]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	vec3 n_out8p0 = vec3(SCREEN_UV, 0.0);

// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out8p0.xy);
		n_out3p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out3p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -677.01, 74.4017 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( -400, 380 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -1200, 440 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -820, 380 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -240, 600 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 0, 540 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( 260, 520 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -1180, 300 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 4, 0, 6, 0, 6, 0, 7, 0, 3, 1, 0, 1, 3, 0, 4, 0, 8, 0, 3, 0, 3, 0, 0, 0 )

[resource]
shader = SubResource( 6 )
